{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["searchClient","algoliasearch","Hit","props","id","src","hit","image","align","alt","name","className","Highlight","attribute","shortDescription","salePrice","App","InstantSearch","indexName","SearchBox","ClearRefinements","RefinementList","Configure","hitsPerPage","Hits","hitComponent","Pagination","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sWAgBMA,G,MAAeC,IACpB,aACA,qCA4CD,SAASC,EAAIC,GACZ,OACC,yBAAKC,GAAG,QACP,yBAAKA,GAAG,YACP,yBAAKC,IAAKF,EAAMG,IAAIC,MAAOC,MAAM,OAAOC,IAAKN,EAAMG,IAAII,QAExD,yBAAKN,GAAG,gBACP,6BACC,yBAAKO,UAAU,YACd,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOP,IAAKH,EAAMG,OAExC,yBAAKK,UAAU,wBACbR,EAAMG,IAAIQ,mBAGb,6BACC,0BAAMH,UAAU,iBAAhB,IAAkCR,EAAMG,IAAIS,cAWlCC,M,uKAlEb,OACC,yBAAKL,UAAU,aACd,kBAACM,EAAA,EAAD,CAAeC,UAAU,iBAAiBlB,aAAcA,GACvD,yBAAKW,UAAU,iBACd,yBAAKA,UAAU,eAAf,WACA,yBAAKA,UAAU,cACd,kBAACQ,EAAA,EAAD,CAAWf,GAAG,mBAIhB,yBAAKO,UAAU,WACd,yBAAKP,GAAG,aACP,yBAAKA,GAAG,iBACP,wCACA,kBAACgB,EAAA,EAAD,OAED,kBAACC,EAAA,EAAD,CAAgBR,UAAU,eAE1B,qCACA,kBAACQ,EAAA,EAAD,CAAgBR,UAAU,oBAE1B,4CACA,kBAACQ,EAAA,EAAD,CAAgBR,UAAU,iBAE1B,kBAACS,EAAA,EAAD,CAAWC,YAAa,KAGzB,yBAAKnB,GAAG,cACP,yBAAKO,UAAU,mBACf,kBAACa,EAAA,EAAD,CAAMC,aAAcvB,IACpB,kBAACwB,EAAA,EAAD,CAAYtB,GAAG,uB,GAhCJuB,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a1299a6.chunk.js","sourcesContent":["import algoliasearch from 'algoliasearch/lite';\nimport React, { Component } from 'react';\nimport {\n\tInstantSearch,\n\tHits,\n\tSearchBox,\n\tPagination,\n\tHighlight,\n\tClearRefinements,\n\tRefinementList,\n\tConfigure,\n} from 'react-instantsearch-dom';\n\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nconst searchClient = algoliasearch(\n\t'SIXIOKEUV9',\n\t'54ed60b4d281f2dd93be0ff4ac031a3e'\n);\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='container'>\n\t\t\t\t<InstantSearch indexName='test-ecommerce' searchClient={searchClient}>\n\t\t\t\t\t<div className='search-header'>\n\t\t\t\t\t\t<div className='search-logo'>TechHut</div>\n\t\t\t\t\t\t<div className='search-bar'>\n\t\t\t\t\t\t\t<SearchBox id='search-input' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='content'>\n\t\t\t\t\t\t<div id='left-side'>\n\t\t\t\t\t\t\t<div id='filter-header'>\n\t\t\t\t\t\t\t\t<h2>Category</h2>\n\t\t\t\t\t\t\t\t<ClearRefinements />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<RefinementList attribute='categories' />\n\n\t\t\t\t\t\t\t<h2>Price</h2>\n\t\t\t\t\t\t\t<RefinementList attribute='salePrice_range' />\n\n\t\t\t\t\t\t\t<h2>Manufacturer</h2>\n\t\t\t\t\t\t\t<RefinementList attribute='manufacturer' />\n\n\t\t\t\t\t\t\t<Configure hitsPerPage={8} />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div id='right-side'>\n\t\t\t\t\t\t\t<div className='search-results'></div>\n\t\t\t\t\t\t\t<Hits hitComponent={Hit} />\n\t\t\t\t\t\t\t<Pagination id='pagination' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</InstantSearch>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction Hit(props) {\n\treturn (\n\t\t<div id='card'>\n\t\t\t<div id='card-img'>\n\t\t\t\t<img src={props.hit.image} align='left' alt={props.hit.name} />\n\t\t\t</div>\n\t\t\t<div id='card-content'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='hit-name'>\n\t\t\t\t\t\t<Highlight attribute='name' hit={props.hit} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='hit-shortDescription'>\n\t\t\t\t\t\t{props.hit.shortDescription}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<span className='hit-salePrice'>${props.hit.salePrice}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nHit.propTypes = {\n\thit: PropTypes.object.isRequired,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}